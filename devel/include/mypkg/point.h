// Generated by gencpp from file mypkg/point.msg
// DO NOT EDIT!


#ifndef MYPKG_MESSAGE_POINT_H
#define MYPKG_MESSAGE_POINT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace mypkg
{
template <class ContainerAllocator>
struct point_
{
  typedef point_<ContainerAllocator> Type;

  point_()
    : color(0)
    , point_x(0)
    , point_y(0)
    , rec_w(0)
    , rec_h(0)  {
    }
  point_(const ContainerAllocator& _alloc)
    : color(0)
    , point_x(0)
    , point_y(0)
    , rec_w(0)
    , rec_h(0)  {
  (void)_alloc;
    }



   typedef int32_t _color_type;
  _color_type color;

   typedef int32_t _point_x_type;
  _point_x_type point_x;

   typedef int32_t _point_y_type;
  _point_y_type point_y;

   typedef int32_t _rec_w_type;
  _rec_w_type rec_w;

   typedef int32_t _rec_h_type;
  _rec_h_type rec_h;





  typedef boost::shared_ptr< ::mypkg::point_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mypkg::point_<ContainerAllocator> const> ConstPtr;

}; // struct point_

typedef ::mypkg::point_<std::allocator<void> > point;

typedef boost::shared_ptr< ::mypkg::point > pointPtr;
typedef boost::shared_ptr< ::mypkg::point const> pointConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mypkg::point_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mypkg::point_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::mypkg::point_<ContainerAllocator1> & lhs, const ::mypkg::point_<ContainerAllocator2> & rhs)
{
  return lhs.color == rhs.color &&
    lhs.point_x == rhs.point_x &&
    lhs.point_y == rhs.point_y &&
    lhs.rec_w == rhs.rec_w &&
    lhs.rec_h == rhs.rec_h;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::mypkg::point_<ContainerAllocator1> & lhs, const ::mypkg::point_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace mypkg

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::mypkg::point_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mypkg::point_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mypkg::point_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mypkg::point_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mypkg::point_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mypkg::point_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mypkg::point_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ced0dd05440ad59425463c1af8c9cc38";
  }

  static const char* value(const ::mypkg::point_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xced0dd05440ad594ULL;
  static const uint64_t static_value2 = 0x25463c1af8c9cc38ULL;
};

template<class ContainerAllocator>
struct DataType< ::mypkg::point_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mypkg/point";
  }

  static const char* value(const ::mypkg::point_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mypkg::point_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 color\n"
"int32 point_x\n"
"int32 point_y\n"
"int32 rec_w\n"
"int32 rec_h\n"
;
  }

  static const char* value(const ::mypkg::point_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mypkg::point_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.color);
      stream.next(m.point_x);
      stream.next(m.point_y);
      stream.next(m.rec_w);
      stream.next(m.rec_h);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct point_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mypkg::point_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mypkg::point_<ContainerAllocator>& v)
  {
    s << indent << "color: ";
    Printer<int32_t>::stream(s, indent + "  ", v.color);
    s << indent << "point_x: ";
    Printer<int32_t>::stream(s, indent + "  ", v.point_x);
    s << indent << "point_y: ";
    Printer<int32_t>::stream(s, indent + "  ", v.point_y);
    s << indent << "rec_w: ";
    Printer<int32_t>::stream(s, indent + "  ", v.rec_w);
    s << indent << "rec_h: ";
    Printer<int32_t>::stream(s, indent + "  ", v.rec_h);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MYPKG_MESSAGE_POINT_H
